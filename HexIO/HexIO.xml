<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HexIO</name>
    </assembly>
    <members>
        <member name="T:HexIO.AddressType">
            <summary>
            The Address type for address values written to an Intel hex file stream
            </summary>
        </member>
        <member name="F:HexIO.AddressType.ExtendedSegmentAddress">
            <summary>
            Indicates the record data field contains a 16-bit segment base address
            </summary>
        </member>
        <member name="F:HexIO.AddressType.ExtendedLinearAddress">
            <summary>
            Indicates the record contains a the upper 16 bit address
            </summary>
        </member>
        <member name="F:HexIO.AddressType.StartLinearAddress">
            <summary>
            Indicates the record contains a 32 bit address
            </summary>
        </member>
        <member name="T:HexIO.Factories.IIntelHexStreamReaderFactory">
            <summary>
            Provides a mechanism to create instances of <see cref="T:HexIO.IIntelHexStreamReader"/>
            </summary>
        </member>
        <member name="M:HexIO.Factories.IIntelHexStreamReaderFactory.Create(System.String)">
            <summary>
            Create an instance of a <see cref="T:HexIO.IIntelHexStreamReader"/>
            </summary>
            <param name="fileName">The file name</param>
            <returns>A <see cref="T:HexIO.IIntelHexStreamReader"/></returns>
        </member>
        <member name="M:HexIO.Factories.IntelHexStreamReaderFactory.Create(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:HexIO.IIntelHexStreamReader">
            <summary>
            Provides a mechanism to read Intel hex records from an underlying <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="P:HexIO.IIntelHexStreamReader.EndOfStream">
            <summary>
            Indicates end of stream has been reached
            </summary>
        </member>
        <member name="P:HexIO.IIntelHexStreamReader.State">
            <summary>
            Get the current <see cref="T:HexIO.IntelHexStreamState"/> for the underlying <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:HexIO.IIntelHexStreamReader.ReadHexRecord">
            <summary>
            Read the next <see cref="T:HexIO.IntelHexRecord"/> from the underlying <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>An instance of a <see cref="T:HexIO.IntelHexRecord"/></returns>
            <exception cref="!:IntelHexStreamException">
            Thrown when an error occurs reading from the stream or if the stream is empty or the
            <see cref="P:HexIO.IIntelHexStreamReader.State"/> EOF is set
            </exception>
        </member>
        <member name="T:HexIO.IIntelHexStreamTransformer">
            <summary>
            Provides a mechanism to modify Intel hex records
            </summary>
        </member>
        <member name="M:HexIO.IIntelHexStreamTransformer.ApplyTransforms(System.String,System.Collections.Generic.IList{HexIO.Transforms.Transform})">
            <summary>
            Apply a set of <see cref="T:HexIO.Transforms.Transform"/> to an Intel hex record file
            </summary>
            <param name="inputFile">The input Intel Hex record file</param>
            <param name="transforms">The set of <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:HexIO.Transforms.Transform"/></param>
            <returns></returns>
        </member>
        <member name="T:HexIO.IIntelHexStreamWriter">
            <summary>
            Provides a mechanism to write Intel hex records to an underlying <see cref="!:Stream"/>
            </summary>
        </member>
        <member name="M:HexIO.IIntelHexStreamWriter.Close">
            <summary>
            Close the underlying <see cref="!:Stream"/> flushing pending changes to the underlying stream and writing EOF record
            </summary>
        </member>
        <member name="M:HexIO.IIntelHexStreamWriter.WriteDataRecord(System.UInt16,System.Collections.Generic.IList{System.Byte})">
            <summary>
            Write a block of <paramref name="data"/> at <paramref name="offset"/>
            </summary>
            <param name="offset">The offset to write the data</param>
            <param name="data">The block data to write</param>
            <remarks><paramref name="data"/> can be max of 255 bytes</remarks>
            <exception cref="!:IntelHexStreamException">Thrown when an error occurs writing to the stream</exception>
        </member>
        <member name="M:HexIO.IIntelHexStreamWriter.WriteExtendedLinearAddressRecord(System.UInt16)">
            <summary>
            Write an Extended Linear Address Record to the underlying <see cref="!:Stream"/>
            </summary>
            <param name="upperLinearBaseAddress">The 16 bit Upper Linear Base Address (LBA)</param>
            <exception cref="!:IntelHexStreamException">Thrown when an error occurs writing to the stream</exception>
        </member>
        <member name="M:HexIO.IIntelHexStreamWriter.WriteExtendedSegmentAddressRecord(System.UInt16)">
            <summary>
            Write an Extended Segment Address Record to the underlying <see cref="!:Stream"/>
            </summary>
            <param name="address">The Upper Segment Base Address(USBA)</param>
            <exception cref="!:IntelHexStreamException">Thrown when an error occurs writing to the stream</exception>
        </member>
        <member name="M:HexIO.IIntelHexStreamWriter.WriteStartLinearAddressRecord(System.UInt32)">
            <summary>
            Write a Start Linear Address Record
            </summary>
            <param name="address">The 32 bit EIP register value</param>
            <exception cref="!:IntelHexStreamException">Thrown when an error occurs writing to the stream</exception>
        </member>
        <member name="M:HexIO.IIntelHexStreamWriter.WriteStartSegmentAddressRecord(System.UInt16,System.UInt16)">
            <summary>
            Write an Start Segment Address Record to the underlying <see cref="!:Stream"/>
            </summary>
            <param name="cs">The CS register value</param>
            <param name="ip">The IP register value</param>
            <exception cref="!:IntelHexStreamException">Thrown when an error occurs writing to the stream</exception>
        </member>
        <member name="T:HexIO.IntelHexRecord">
            <summary>
            A representation of a hex record line
            </summary>
        </member>
        <member name="M:HexIO.IntelHexRecord.#ctor(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Create an instance of a <see cref="T:HexIO.IntelHexRecord"/> from a <see cref="T:System.Collections.Generic.IList`1"/> of bytes
            </summary>
            <param name="hexRecordBytes"></param>
        </member>
        <member name="P:HexIO.IntelHexRecord.Bytes">
            <summary>
            The record bytes for the <see cref="T:HexIO.IntelHexRecord"/> read from the stream
            </summary>
        </member>
        <member name="P:HexIO.IntelHexRecord.CheckSum">
            <summary>
            The record checksum
            </summary>
        </member>
        <member name="P:HexIO.IntelHexRecord.Data">
            <summary>
            The data from the record
            </summary>
        </member>
        <member name="P:HexIO.IntelHexRecord.Offset">
            <summary>
            The load offset of the record
            </summary>
        </member>
        <member name="P:HexIO.IntelHexRecord.RecordLength">
            <summary>
            The number of bytes in the record
            </summary>
        </member>
        <member name="P:HexIO.IntelHexRecord.RecordType">
            <summary>
            The record type
            </summary>
        </member>
        <member name="M:HexIO.IntelHexRecord.ToHexRecordString">
            <summary>
            Convert the <see cref="T:HexIO.IntelHexRecord"/> to a hex record string representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:HexIO.IntelHexRecordType">
            <summary>
            The Intel hex record type
            </summary>
        </member>
        <member name="F:HexIO.IntelHexRecordType.Data">
            <summary>
            Indicates the record contains data and a 16-bit starting address for the data
            </summary>
        </member>
        <member name="F:HexIO.IntelHexRecordType.EndOfFile">
            <summary>
            Indicates the record contains no data
            </summary>
        </member>
        <member name="F:HexIO.IntelHexRecordType.ExtendedSegmentAddress">
            <summary>
            Indicates the record data field contains a 16-bit segment base address
            </summary>
        </member>
        <member name="F:HexIO.IntelHexRecordType.StartSegmentAddress">
            <summary>
            Indicates the record specifies the initial content of the CS:IP registers
            </summary>
        </member>
        <member name="F:HexIO.IntelHexRecordType.ExtendedLinearAddress">
            <summary>
            Indicates the record contains a the upper 16 bit address
            </summary>
        </member>
        <member name="F:HexIO.IntelHexRecordType.StartLinearAddress">
            <summary>
            Indicates the record contains a 32 bit address
            </summary>
        </member>
        <member name="T:HexIO.IntelHexStreamReader">
            <summary>
            A reader for Intel Hex stream
            </summary>
        </member>
        <member name="P:HexIO.IntelHexStreamReader.State">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IntelHexStreamReader.ReadHexRecord">
            <inheritdoc/>
        </member>
        <member name="T:HexIO.IntelHexStreamState">
            <summary>
            The <see cref="T:HexIO.IntelHexStreamReader"/> state
            </summary>
        </member>
        <member name="P:HexIO.IntelHexStreamState.ExtendedInstructionPointer">
            <summary>
            The last Extended Instruction Pointer (EIP) value read from the stream
            </summary>
        </member>
        <member name="P:HexIO.IntelHexStreamState.UpperLinearBaseAddress">
            <summary>
            The last Upper Linear Base Address (ULBA) value read from the stream
            </summary>
        </member>
        <member name="P:HexIO.IntelHexStreamState.UpperSegmentBaseAddress">
            <summary>
            The last Upper Segment Base Address (USBA) read from the stream
            </summary>
        </member>
        <member name="P:HexIO.IntelHexStreamState.SegmentAddress">
            <summary>
            The last <see cref="P:HexIO.IntelHexStreamState.SegmentAddress"/> read from the stream
            </summary>
        </member>
        <member name="P:HexIO.IntelHexStreamState.Eof">
            <summary>
            Indicates if the End Of File record has been read
            </summary>
        </member>
        <member name="T:HexIO.IntelHexStreamTransformer">
            <summary>
            An Intel Hex stream transformer
            </summary>
        </member>
        <member name="M:HexIO.IntelHexStreamTransformer.#ctor(HexIO.IO.IFileSystem,HexIO.Matching.IIntelHexRecordMatcher,HexIO.Factories.IIntelHexStreamReaderFactory)">
            <summary>
            Cerate an instance of a <see cref="T:HexIO.IntelHexStreamTransformer"/>
            </summary>
            <param name="fileSystem">An <see cref="T:HexIO.IO.IFileSystem"/> instance for file IO</param>
            <param name="intelHexRecordMatcher"></param>
            <param name="intelHexStreamReaderFactory"></param>
        </member>
        <member name="M:HexIO.IntelHexStreamTransformer.ApplyTransforms(System.String,System.Collections.Generic.IList{HexIO.Transforms.Transform})">
            <inheritdoc/>
        </member>
        <member name="T:HexIO.IntelHexStreamWriter">
            <summary>
            An Intel Hex stream writer
            </summary>
        </member>
        <member name="M:HexIO.IntelHexStreamWriter.Close">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IntelHexStreamWriter.WriteDataRecord(System.UInt16,System.Collections.Generic.IList{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IntelHexStreamWriter.WriteExtendedLinearAddressRecord(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IntelHexStreamWriter.WriteExtendedSegmentAddressRecord(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IntelHexStreamWriter.WriteStartLinearAddressRecord(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IntelHexStreamWriter.WriteStartSegmentAddressRecord(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:HexIO.IO.IFileSystem.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HexIO.IO.IFileSystem.Rename(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="target"></param>
        </member>
        <member name="T:HexIO.Matching.IIntelHexRecordMatcher">
            <summary>
            Provides a mechanism to match a <see cref="T:HexIO.Matching.IntelHexRecordMatch"/> against a <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="M:HexIO.Matching.IIntelHexRecordMatcher.IsMatch(HexIO.Matching.IntelHexRecordMatch,HexIO.IntelHexRecord)">
            <summary>
            Determine if a <see cref="T:HexIO.Matching.IntelHexRecordMatch"/> matches an <see cref="T:HexIO.IntelHexRecord"/> instance
            </summary>
            <param name="match">The <see cref="T:HexIO.Matching.IntelHexRecordMatch"/> to match</param>
            <param name="record">The <see cref="T:HexIO.IntelHexRecord"/> to check</param>
            <returns>true if match found</returns>
        </member>
        <member name="T:HexIO.Matching.IntelHexRecordMatch">
            <summary>
            A match specifier
            </summary>
        </member>
        <member name="P:HexIO.Matching.IntelHexRecordMatch.Data">
            <summary>
            The data to match
            </summary>
        </member>
        <member name="P:HexIO.Matching.IntelHexRecordMatch.Offset">
            <summary>
            The load offset to match
            </summary>
        </member>
        <member name="P:HexIO.Matching.IntelHexRecordMatch.RecordLength">
            <summary>
            The number of bytes to match
            </summary>
        </member>
        <member name="P:HexIO.Matching.IntelHexRecordMatch.RecordType">
            <summary>
            The record type to match
            </summary>
        </member>
        <member name="P:HexIO.Matching.IntelHexRecordMatch.ExpectedMatchResult">
            <summary>
            The number of match fields
            </summary>
        </member>
        <member name="T:HexIO.Matching.IntelHexRecordMatcher">
            <summary>
            An Intel hex record matcher 
            </summary>
        </member>
        <member name="M:HexIO.Matching.IntelHexRecordMatcher.IsMatch(HexIO.Matching.IntelHexRecordMatch,HexIO.IntelHexRecord)">
            <inheritdoc/>
        </member>
        <member name="T:HexIO.SegmentAddress">
            <summary>
            A segment address
            </summary>
        </member>
        <member name="M:HexIO.SegmentAddress.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Create an instance of a <see cref="T:HexIO.SegmentAddress"/>
            </summary>
            <param name="cs">The code segment value</param>
            <param name="ip">The instruction pointer value</param>
        </member>
        <member name="P:HexIO.SegmentAddress.CodeSegment">
            <summary>
            The code segment value
            </summary>
        </member>
        <member name="P:HexIO.SegmentAddress.InstructionPointer">
            <summary>
            The instruction pointer value
            </summary>
        </member>
        <member name="M:HexIO.SegmentAddress.ToString">
            <inheritdoc/>
        </member>
        <member name="T:HexIO.Transforms.DeleteTransform">
            <summary>
            Perform a delete of an <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="T:HexIO.Transforms.InsertPosition">
            <summary>
            Indicates the insert position for new <see cref="T:HexIO.IntelHexRecord"/> instances
            </summary>
        </member>
        <member name="F:HexIO.Transforms.InsertPosition.Before">
            <summary>
            Insert before the matched <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="F:HexIO.Transforms.InsertPosition.After">
            <summary>
            Insert after the matched <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="F:HexIO.Transforms.InsertPosition.BeforeAndAfter">
            <summary>
            Insert before and after the matched <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="T:HexIO.Transforms.InsertTransform">
            <summary>
            Perform an insert of an <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="P:HexIO.Transforms.InsertTransform.Position">
            <summary>
            The insert position of the <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="P:HexIO.Transforms.InsertTransform.Record">
            <summary>
            The <see cref="T:HexIO.IntelHexRecord"/> to insert
            </summary>
        </member>
        <member name="T:HexIO.Transforms.ModificationTransform">
            <summary>
            Perform a modification of an <see cref="T:HexIO.IntelHexRecord"/>
            </summary>
        </member>
        <member name="M:HexIO.Transforms.ModificationTransform.#ctor(HexIO.Matching.IntelHexRecordMatch,System.Nullable{System.UInt16},System.Nullable{HexIO.IntelHexRecordType},System.Collections.Generic.List{System.Byte})">
            <summary>
            Create an instance of a <see cref="T:HexIO.Transforms.ModificationTransform"/>
            </summary>
            <param name="match">The <see cref="T:HexIO.Matching.IntelHexRecordMatch"/> instance to match <see cref="T:HexIO.IntelHexRecord"/> instances against</param>
            <param name="offset">The offset value to apply, set to null to leave unmodified</param>
            <param name="recordType"></param>
            <param name="data"></param>
        </member>
        <member name="P:HexIO.Transforms.ModificationTransform.Data">
            <summary>
            The data from the record
            </summary>
        </member>
        <member name="P:HexIO.Transforms.ModificationTransform.Offset">
            <summary>
            The load offset of the record
            </summary>
        </member>
        <member name="P:HexIO.Transforms.ModificationTransform.RecordType">
            <summary>
            The record type
            </summary>
        </member>
        <member name="T:HexIO.Transforms.Transform">
            <summary>
            The base transform class
            </summary>
        </member>
        <member name="M:HexIO.Transforms.Transform.#ctor(HexIO.Matching.IntelHexRecordMatch)">
            <summary>
            Create an instance of a <see cref="T:HexIO.Transforms.Transform"/>
            </summary>
            <param name="match">The <see cref="T:HexIO.Matching.IntelHexRecordMatch"/> instance to match <see cref="T:HexIO.IntelHexRecord"/> instances against</param>
        </member>
        <member name="P:HexIO.Transforms.Transform.Match">
            <summary>
            The <see cref="T:HexIO.Matching.IntelHexRecordMatch"/> match
            </summary>
        </member>
    </members>
</doc>
